import CryptoJS from 'crypto-js';export function formatNumberWithSpaces(number) {    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');}export const base64url = (source) => {    // Encode in classical base64    let encodedSource = CryptoJS.enc.Base64.stringify(source);    // Remove padding equal characters    encodedSource = encodedSource.replace(/=+$/, '');    // Replace characters according to base64url specifications    encodedSource = encodedSource.replace(/\+/g, '-');    encodedSource = encodedSource.replace(/\//g, '_');    return encodedSource;};export const createJWT = (payload, secret) => {    // Encode Header    const header = {        'alg' : 'HS256',        'typ' : 'JWT'    };    const stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));    const encodedHeader = base64url(stringifiedHeader);    // Encode Payload    const stringifiedPayload = CryptoJS.enc.Utf8.parse(JSON.stringify(payload));    const encodedPayload = base64url(stringifiedPayload);    // Create Signature    const token = encodedHeader + '.' + encodedPayload;    const signature = CryptoJS.HmacSHA256(token, secret);    const encodedSignature = base64url(signature);    return token + '.' + encodedSignature;};
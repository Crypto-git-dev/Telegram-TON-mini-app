import CryptoJS from 'crypto-js';export const formatNumberWithSpaces = (number) => {    if (number == null || isNaN(number)) {        return '0';    }    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');};export const createUnixTime = () => {    let currentDate = new Date();    let unixTimeMilliseconds = currentDate.getTime();    let unixTimeSeconds = Math.floor(unixTimeMilliseconds / 1000);    return unixTimeSeconds;};export const base64url = (source) => {    let encodedSource = CryptoJS.enc.Base64.stringify(source);    encodedSource = encodedSource.replace(/=+$/, '');    encodedSource = encodedSource.replace(/\+/g, '-');    encodedSource = encodedSource.replace(/\//g, '_');    return encodedSource;};export const createJWT = (payload) => {    const secret = import.meta.env.VITE_SECRET_KEY;    const header = {        'alg' : 'HS256',        'typ' : 'JWT'    };    const stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));    const encodedHeader = base64url(stringifiedHeader);    const stringifiedPayload = CryptoJS.enc.Utf8.parse(JSON.stringify(payload));    const encodedPayload = base64url(stringifiedPayload);    const token = encodedHeader + '.' + encodedPayload;    const signature = CryptoJS.HmacSHA256(token, secret);    const encodedSignature = base64url(signature);    return token + '.' + encodedSignature;};export const generateUserToken = (userTg) => {    const payload = {        id : userTg.id,        username : userTg.username,        bio : {            first_name : userTg.first_name,            last_name : userTg.last_name,            language : userTg.language_code        },    };    return createJWT(payload);};